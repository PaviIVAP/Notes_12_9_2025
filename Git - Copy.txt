Here are the two ways to create folders in Git Bash (or similar terminals):
1.Navigate to the Folder First Using cd and mkdir 

cd /c/users        navigates to that path
mkdir NewFolder    mkdir created new folder

2. Directly Create the Folder with the Full Path

mkdir creates NewFolder directly under /c/users without 
needing to navigate there first.

mkdir /c/users/NewFolder



-p for Nested Folders

mkdir -p /c/users/NewFolder/SubFolder1/SubFolder2

This creates all the folders in one command, even if the
parent folders don‚Äôt already exist.


git init will create a new git folder

ls  -a list all the hidden files 

touch names.text ----will create new text file----now it will in untracked files

now the made changes should be saved for others should know

git status ----will show the status of the change

git add filename ----. will include all he files type of like saving ===now the changes will be added 

now need to commit all the changes 

git commit -m "message"---this will commit into the folder

again give git status which will show green and no chnage sneed to be added

now lets changes the file

vi name.text  now enter any text which will be added in that text file

cat names.text will show all the text in the terminal

again git status ---will show that there is some change which needs to be saved "staged"so
git add. will stage all the files

now to unstage it git restore  --staged name.text now will be removed

git status --now they will be shown as not staged

git add. now will be staged 

git commit  -m "message"

-----now to see all the history

"Press Esc to make sure you're in command mode.
Save and Exit:

Type :wq and press Enter. This saves your changes and exits the vi editor.
Exit Without Saving:

If you want to discard changes, type :q! and press Enter."


git log --for history 

rm -rf name.text to delete the file mentioned


now to remove the commit history 

copy the commit hashid below the commit which is need to be deleted
this will remove the commit all the above the hashid

now these will be under unstaged as they all are deleted from the commit stage

without making commit/recorded in the history
we can use stash--all the chnages wil be saved without commitng 


now git stash pop will bring out all the changes
git stash clear will clear all the git stash 



///////////////////////////////////////

now need to connect the project which we created in our system (remote)to the github repositiory

git remote add origin https://github.com/MaximusWhiteDoge/FirstRemoteProject.git

now need to push it there for it to reflect in the git repositiory

$ git push https://github.com/MaximusWhiteDoge/FirstRemoteProject.git
or git push origin master

now to copy another repository we can use fork command 

git fork in github--this will copy that original repository to another repository where you can experiment but it doesn't affect the original

to clone the upstream use--- git clone url

from where you have cloned or forked the project is called upstream url

i created a fork or a copy from freecodecamp and created a branch called pavitha
and made some changes in readme.md file
now create a pull request to merge in main branch 


another note
suppose if i try to commit a file which is on main but not on pavitha







-----------------------------------------
create a branch pavitha 
made chnage while i was on master branch
create a new branch and switched to it
m--s

--------------------------------------------------------------------------------------------------some imporatant commands
git restore <file>	Restores file to the last committed version (loses local changes).
git restore --staged <file>	Unstages file but keeps changes.
git reset <file>	Unstages file but keeps changes.



Delete a local branch
git branch -d feature-1

Delete a remote branch
git push origin --delete feature-1

 Using git reset (Affects Commits & Staging)
git reset --soft HEAD~1  # Undo last commit, keep changes staged
git reset --mixed HEAD~1 # Undo last commit, unstage changes
git reset --hard HEAD~1  # Undo last commit, discard all changes
git reset HEAD file.txt  # Unstage file.txt (keep modifications)
üîπ Using git restore (Affects File Content)

git restore file.txt                # Discard unstaged changes in file.txt
git restore --staged file.txt        # Unstage file.txt (keep changes)
git restore --source HEAD file.txt   # Restore file.txt to last committed state
git restore .                        # Discard all unstaged changes
git restore --source <commit-hash> -- file.txt

Delete a file	rm filename
Force delete a file	rm -f filename
Delete an empty directory	rmdir dirname
Delete a non-empty directory	rm -r dirname
Force delete a directory	rm -rf dirname


Switch ‚Üí Helps friends inside the same group talk to each other.
Router ‚Üí Helps different groups connect and talk.
Gateway ‚Üí If a friend outside both groups wants to talk, they go through a common friend (gateway to another world).

Imagine we have three hosts (computers):

Host A (192.168.1.10)
Host B (192.168.1.20)
Host C (192.168.2.10)
And they are connected like this:


[Host A] ---- [Switch] ---- [Host B]   (Same Network: 192.168.1.0/24)
                     |
                  [Router]  
                     |
[Host C] ---- [Switch]   (Different Network: 192.168.2.0/24)
How They Communicate?
1Ô∏è‚É£ Switch (Inside Same Network)

If Host A wants to talk to Host B, the switch helps them communicate inside the same network (192.168.1.x).
The switch just forwards the data between them.
2Ô∏è‚É£ Router (Between Different Networks)

If Host A (192.168.1.10) wants to talk to Host C (192.168.2.10), a switch can't help because they are in different networks.
The router comes in and routes the data from Network 1 (192.168.1.0) to Network 2 (192.168.2.0).
3Ô∏è‚É£ Gateway (Exit to Another World)

If Host A wants to access the internet (Google, YouTube, etc.), it needs to go beyond both networks.
The gateway (usually the router itself) takes the request and sends it to the internet.
Summary
Component	What It Does
Switch	Helps hosts talk inside the same network
Router	Connects different networks
Gateway	Connects to external networks like the internet

It consists of four numbers (octets) separated by dots, each ranging from 0 to 255.

Example:
‚úÖ 192.168.2.1 (a valid host IP)
‚úÖ 192.168.2.45 (another host IP)

/24 is called the CIDR notation and represents the subnet mask.

üëâ /24 means the first 24 bits are reserved for the network.

üëâ The remaining 8 bits are for host devices.

First 3 octets (192.168.2) ‚Üí Network part
Last octet (0 - 255) ‚Üí Host part



An IPv4 address (like 192.168.2.0) is made up of 4 numbers separated by dots.
Each number (octet) is 8 bits, so the full IP is 32 bits (4 √ó 8).


Since 24 bits are fixed, all devices must have 192.168.2 as the first three numbers.
The last 8 bits (from 00000001 to 11111110) are for devices (1 - 254).


/24 means first 24 bits are for the network, last 8 bits are for devices.
Allows 254 devices (1-254), with .0 as network and .255 as broadcast.


On host01 we want to resolve name news to news.yahoo.com automatically without hard coding its entry in /etc/hosts file. Add the required changes on host01.


Add search yahoo.com entry in /etc/resolv.conf file.

MrMax$579
Maximus#579

<?xml version="1.0"?>
<project name="Ant" default="main" basedir=".">
    <!-- Compiles the java code (including the usage of library for JUnit -->
    <target name="compile">
        <javac srcdir="/opt/ant/src" destdir="/opt/ant/build">
        </javac>
    </target>
    <!-- Creates Javadoc -->
    <target name="docs" depends="compile">
        <javadoc packagenames="src" sourcepath="/opt/ant/src" destdir="/opt/ant/docs">
            <!-- Define which files / directory should get included, we include all -->
            <fileset dir="/opt/ant/src">
                <include name="**" />
            </fileset>
        </javadoc>
    </target>
    <!--Creates the deployable jar file  -->
    <target name="jar" depends="compile">
        <jar basedir="/opt/ant/build" destfile="/opt/ant/dist/MyClass.jar" >
            <manifest>
                <attribute name="Main-Class" value="MyClass" />
            </manifest>
        </jar>
    </target>
    <target name="run" depends="jar">
      <java jar="/opt/ant/dist/MyClass.jar" fork="true" />
    </target>
    <target name="main" depends="compile, jar, docs, run">
        <description>Main target</description>
    </target>
</project>



Run a class from a directory	java -cp /path/to/classes MainClass
Run a class from multiple dirs	java -cp dir1:dir2 MainClass
Run a class with an external JAR	java -cp .:library.jar MainClass
Run an executable JAR	java -jar myapp.jar
Run a JAR with dependencies	java -cp myapp.jar:library.jar MainClass



How Your Computer Differentiates Google‚Äôs and YouTube‚Äôs Responses
Your device initiates two different connections:

1Ô∏è‚É£ Google (Port 50002):


192.168.1.100:50002 ‚Üí 142.250.190.14:443 (Google)

2Ô∏è‚É£ YouTube (Port 50003):

192.168.1.100:50003 ‚Üí 142.250.190.78:443 (YouTube)
When the responses come back, they look like this:

1Ô∏è‚É£ Google‚Äôs Response:

142.250.190.14:443 ‚Üí 192.168.1.100:50002
Since the destination port is 50002, your computer knows this data belongs to Google Chrome tab 1.


2Ô∏è‚É£ YouTube‚Äôs Response:
142.250.190.78:443 ‚Üí 192.168.1.100:50003
Since the destination port is 50003, your computer knows this data belongs to YouTube in Chrome tab 2.
üìå Key Rule: Your computer tracks the original request. When the response arrives, it matches the source IP + source port from the response with an active connection.

How Does Your Computer Know 443 Means Secure Data?
üîπ Port 443 is just a convention‚Äîit tells your browser that the data will be HTTPS encrypted using TLS.
üîπ When your browser connects to 443, it expects encrypted data and automatically decrypts it using the TLS/SSL handshake.
üîπ This is why you see a lock icon üîí in the browser when accessing HTTPS websites.

Final Answer: How Does Your Computer Separate Google‚Äôs and YouTube‚Äôs Responses?
‚úÖ Your computer uses IP + Port pairs:

142.250.190.14:443 ‚Üí 50002 (Google)
142.250.190.78:443 ‚Üí 50003 (YouTube)
‚úÖ Even though both use port 443, the source IP tells your computer which server the response is coming from.

‚úÖ The destination port (50002, 50003) helps your computer route data to the correct browser tab/application.
---------------------------------------------------------------

If you‚Äôre using a home Wi-Fi network, your router also plays a role.

It keeps track of which device and which port made a request.
When the response arrives, it forwards it to the correct device and port inside your network


Macedonia$579







