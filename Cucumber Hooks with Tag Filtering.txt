Cucumber Hooks with Tag Filtering

REST Assured Filters for Logging and Custom Headers
Flaky Tests
retryAnalyzer 



@Before runs before every scenario

@After runs after every scenario


You Can Control Execution with Tags
If you want to restrict them:

java
@Before("@SmokeTest")
public void setupSmoke() {
    System.out.println("Only before @SmokeTest scenarios");
}

@After("not @SkipTeardown")
public void teardownUnlessSkipped() {
    System.out.println("Teardown for all except @SkipTeardown");
}

FLAKY TESTS

flaky test is one that sometimes passes and sometimes fails, even when the code and environment haven’t changed

Timing Issues: Async operations, race conditions, or delays.

Environment Sensitivity: OS differences, memory usage, or CPU load.

External Dependencies: APIs, databases, or services that aren’t always available.
======================================================================================================================================

@Before vs background


Here’s what actually happens under the hood:

Cucumber loads the test context (Java classes, hooks, step definitions)

It identifies all hooks (@Before, @After, etc.)

Before any Gherkin step is executed, it runs the @Before hook

Then it parses the .feature file and runs the Background steps

Finally, it executes the scenario steps

So even though the Background is the first thing in the feature file, it’s not the first thing executed—because the execution starts in Java, not Gherkin.

Hooks are meant for technical setup: initializing drivers, setting base URIs, cleaning up data, etc.

Background is for business-level setup: logging in, navigating to a page, etc.

If Background ran first, your step definitions might not even be ready yet!

==========================================================================================================
@Before is part of the Cucumber runtime engine and is triggered before any Gherkin steps are executed.

Background is part of the feature file logic, and runs after hooks but before scenario steps.

