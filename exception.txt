Slovakia$579



Yes, exactly! If you're using an Animal reference, you can only call the methods that are declared in Animal or overridden by Dog (or any other subclass of Animal).

Why?
In Java, when you assign an object to a reference of a parent class (like Animal), the reference type determines what methods are available for calling. The actual object type determines what method implementation is executed, if that method is overridden in the subclass.

If a method is not present in the reference type, you can't call it directly — unless you downcast the reference to a more specific type that contains the method.



class Animal {
    public void sound() {
        System.out.println("Some animal sound");
    }

    public void move() {
        System.out.println("Animal is moving");
    }
}

class Dog extends Animal {
    @Override
    public void sound() {
        System.out.println("Bark");
    }

    // Dog-specific method
    public void fetch() {
        System.out.println("Fetching the ball");
    }
}

public class Test {
    public static void main(String[] args) {
        Animal animal = new Dog();  // Animal reference, but actual object is Dog
        animal.sound();  // Will call the sound() method from Dog class (overridden method)
        animal.move();   // Will call the move() method from Animal class (inherited method)
        
        // The following line would cause a compile-time error because fetch() is not in Animal
        // animal.fetch();  // Error: fetch() is not defined in Animal class
    }
}
-------------------------------------------------------------------------------------------------------------------------
exception handling 
Step 1 (main method): The main() method calls processData("data.txt"). This is where the program starts, and processData is responsible for calling readFile.

Step 2 (processData method): processData() calls readFile(), which attempts to read the file. If the file doesn't exist, readFile() throws an IOException.

Step 3 (Exception propagation): The exception is thrown from readFile() and propagates back to processData(). Since processData() doesn't catch the exception, it propagates it further to main().

Step 4 (Exception handling in main): main() catches the exception in the catch block and handles it by printing the error message ("Error: File not found: data.txt").


The exception is thrown in readFile() when the file doesn’t exist.
It is propagated to processData(), which doesn't handle it and allows it to propagate further.
Finally, the exception reaches main(), where it is caught and handled.
So, in simple terms: readFile() throws the exception, processData() propagates it, and main() handles it.
--------------------------------------------------------------------------------------------------------------------------------
SUbstring

String str = "abcdef";
String result = str.substring(2, 4); // "cd"
Starting at index 2, which is 'c'.
Ending at index 4 (exclusive), so the substring does not include the character at index 4 ('e').