JSON_API
‚úÖ Use Case	                   üîß Jackson Method	                                           üß† Details
Java object ‚Üí JSON string	    writeValueAsString(obj)	                                       Most common ‚Äî serializes to one-liner JSON
Java object ‚Üí formatted JSON	    writerWithDefaultPrettyPrinter().writeValueAsString(obj)	       Beautifies with indents
JSON string ‚Üí POJO	            readValue(json, Class<T>)	                                       Requires matching fields in POJO
JSON string ‚Üí Map	            readValue(json, new TypeReference<Map<String, Object>>() {})       Flexible if structure varies
JSON string ‚Üí JsonNode tree	    readTree(json)	                                               Best for dynamic or unknown structure
JsonNode ‚Üí JSON string	            toString()                                                         Quick way to dump full JSON
JsonNode ‚Üí formatted string	    writerWithDefaultPrettyPrinter().writeValueAsString(node)	       Prettifies the tree




DIFFERENCES:

Extract specific values from response	JsonPath
Build or parse full JSON objects	JSONObject
Handle JSON arrays/lists	        JSONArray

JsonPath lets you query and extract data from JSON documents using path-like expressions ‚Äî similar to XPath for XML.

import io.restassured.path.json.JsonPath;

String json = "{ \"id\": 9999, \"name\": \"Kyubi\", \"skills\": [\"Java\", \"Docker\"] }";
JsonPath jp = new JsonPath(json);

System.out.println(jp.getInt("id"));       // 9999
System.out.println(jp.getString("name"));  // Kyubi
System.out.println(jp.getList("skills"));  // [Java, Docker]

Extracting fields from REST Assured responses (res.jsonPath().getString("field"))

Validating values without mapping to a POJO

Traversing nested structures effortlessly
=======================================================================================


 2. JSONObject ‚Äî Classic JSON Structure Manipulator

Part of org.json.*, a simple library for creating, reading, and modifying JSON objects programmatically.

import org.json.JSONObject;

JSONObject obj = new JSONObject();
obj.put("id", 888);
obj.put("name", "Ninetails");
obj.put("status", "available");

System.out.println(obj.toString());  // {"id":888,"name":"Ninetails","status":"available"}

Building JSON payloads for requests

Parsing JSON strings without Jackson

Quick manipulations during test case setup
=======================================================================================================================
üìö 3. JSONArray ‚Äî Handles Lists of Values or Objects

Also part of org.json.*, used to represent and manipulate a JSON array ([...])


JSONArray arr = new JSONArray();
arr.put("Selenium");
arr.put("TestNG");

JSONObject obj = new JSONObject();
obj.put("skills", arr);

System.out.println(obj.toString());  
// {"skills":["Selenium","TestNG"]}

Working with lists inside a JSON payload

Adding/removing items dynamically

Preparing test data arrays for API inputs

===============================================================================================================================
to work with existing values

import org.json.JSONObject;
---------------------------------------------------------------------------------------
Response res = ... // Your actual API response
JSONObject jsonObj = new JSONObject(res.getBody().asString());

// Access values
String status = jsonObj.getString("status");
int id = jsonObj.getInt("id");



import org.json.JSONArray;
--------------------------------------------------------------------------------------------------------------

Response res = ... // Response returns a JSON array
JSONArray jsonArr = new JSONArray(res.getBody().asString());

// Access items
JSONObject firstObj = jsonArr.getJSONObject(0);
String name = firstObj.getString("name");









==========================================================================================
-----refer to eclipse APIPractice-->seralization
OBJECTMAPPER

‚úÖ Convert JSON ‚Üí Java
----------------------------

Profile profile = objectMapper.readValue(jsonFile, Profile.class);
Reads a JSON string or file and turns it into a Java object (POJO).
-----------------------------------------------------
‚úÖ Convert Java ‚Üí JSON

String jsonString = objectMapper.writeValueAsString(profile);
Serializes a Java object to a JSON string (or file using writeValue()).
-----------------------------------------------------
‚úÖ Read as JsonNode

JsonNode root = objectMapper.readTree(jsonFile);
Parses JSON into a tree-like structure ‚Äî great when schema is dynamic or partially unknown.
----------------------------------------------------------------------------------------
‚úÖ Write to File
java
objectMapper.writeValue(new File("output.json"), profile);
Saves JSON output to a file ‚Äî easy for handover, config, or test data storage.
-----------------------------------------------------------------------------------
üîç Bonus: You Can Also Customize
Use annotations (@JsonProperty, @JsonIgnore) to control mapping

Handle unknown fields, default values, or custom serializers/deserializers


